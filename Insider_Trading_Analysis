{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19124\n",
      "        0           1                    2   \\\n",
      "19119  Buy  2015-07-29  2015-08-03 12:21:04   \n",
      "19120  Buy  2015-07-31  2015-08-03 12:10:14   \n",
      "19121  Buy  2015-07-31  2015-08-03 11:47:12   \n",
      "19122  Buy  2015-07-31  2015-08-03 08:15:13   \n",
      "19123  Buy  2015-07-31  2015-08-03 08:00:11   \n",
      "\n",
      "                                      3     4                   5   \\\n",
      "19119                          Point.360  PTSX   BAGERDJIAN HAIG S   \n",
      "19120                  NeuroMetrix, Inc.  NURO         Gozani Shai   \n",
      "19121                  Aqua Metals, Inc.  AQMS          Slade Mark   \n",
      "19122  AIR PRODUCTS & CHEMICALS INC /DE/   APD       Ghasemi Seifi   \n",
      "19123                           LKQ CORP  LKQX  Zarcone Dominick P   \n",
      "\n",
      "                               6       7          8                9   \\\n",
      "19119  director officer 10% owner  20,000    $0.6900     $13,800.0000   \n",
      "19120            director officer  17,857    $0.8366     $14,939.2000   \n",
      "19121                    director  20,000    $5.0000    $100,000.0000   \n",
      "19122            director officer  20,000  $143.2570  $2,865,140.0000   \n",
      "19123                              10,000   $31.1414    $311,414.0000   \n",
      "\n",
      "              10      11  \n",
      "19119  6,417,240  Form 4  \n",
      "19120    211,693  Form 4  \n",
      "19121     20,000  Form 4  \n",
      "19122    209,171  Form 4  \n",
      "19123    181,263  Form 4  \n"
     ]
    }
   ],
   "source": [
    "### Retrieving Insider buy side transactions and storing it in a list of lists \n",
    "\n",
    "import pandas as pd \n",
    "\n",
    "buying_url = \"http://insidertrading.org/large-stock-buying.php?sort_by=acceptance_datetime&asc=&symbol=&date_from=2015-08-01&date_to=2016-08-07&submit=+GO+&page=\"\n",
    "data = []\n",
    "url_pages = []\n",
    "\n",
    "def extract_table(url):    \n",
    "    buying_text = requests.get(url).text\n",
    "    buying_parsed = BeautifulSoup(buying_text)\n",
    "\n",
    "    buying_table = buying_parsed.find(\"table\", {\"id\": \"tracker\"})\n",
    "    buying = buying_table.find(\"tbody\")\n",
    "    rows = buying.find_all(\"tr\")\n",
    "\n",
    "    for row in rows:\n",
    "        cols = row.find_all('td')\n",
    "        cols = [item.text.strip() for item in cols]\n",
    "        data.append([item for item in cols])\n",
    "\n",
    "url_pages = [buying_url+str(i+1) for i in range(0,64)]    \n",
    "map(extract_table, url_pages)\n",
    "    \n",
    "## Checking I have the expected data set\n",
    "print len(data)\n",
    "df = pd.DataFrame(data)\n",
    "print df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40267\n",
      "         0           1                    2                               3   \\\n",
      "40262  Sell  2015-07-24  2015-08-03 13:04:31    SUNOCO LOGISTICS PARTNERS LP   \n",
      "40263  Sell  2015-07-31  2015-08-03 11:36:14         CHEMICAL FINANCIAL CORP   \n",
      "40264  Sell  2015-08-01  2015-08-03 10:25:47  ALBANY INTERNATIONAL CORP /DE/   \n",
      "40265  Sell  2015-07-15  2015-08-03 10:06:51                       YSEEK INC   \n",
      "40266  Sell  2015-07-15  2015-08-03 10:06:51                       YSEEK INC   \n",
      "\n",
      "         4                      5         6        7         8   \\\n",
      "40262   SXL      Lauterbach Kurt A   officer   24,550  $34.7200   \n",
      "40263  CHFC    Lievense Richard M.  director   11,188  $32.9069   \n",
      "40264   AIN  Halftermeyer Daniel A   officer   21,311  $39.0500   \n",
      "40265  ATDU           Phipps David            200,000   $0.8000   \n",
      "40266  ATDU           Phipps David             50,000   $0.1000   \n",
      "\n",
      "                  9        10      11  \n",
      "40262  $852,376.0000  131,854  Form 4  \n",
      "40263  $368,162.0000   74,097  Form 4  \n",
      "40264  $832,195.0000        0  Form 4  \n",
      "40265  $160,000.0000  200,000  Form 4  \n",
      "40266    $5,000.0000        0  Form 4  \n"
     ]
    }
   ],
   "source": [
    "### Adding Insider selling side transactions to the data\n",
    "\n",
    "selling_url = \"http://insidertrading.org/large-stock-selling.php?sort_by=acceptance_datetime&asc=&symbol=&date_from=2015-08-01&date_to=2016-08-07&submit=+GO+&page=\"\n",
    "url_pages = [selling_url+str(i+1) for i in range(0,71)]    \n",
    "     \n",
    "map(extract_table, url_pages)\n",
    "    \n",
    "print len(data)\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Side</th>\n",
       "      <th>Date</th>\n",
       "      <th>AcceptanceDate</th>\n",
       "      <th>Company</th>\n",
       "      <th>Symbol</th>\n",
       "      <th>Owner</th>\n",
       "      <th>OwnerRel</th>\n",
       "      <th>Shares</th>\n",
       "      <th>SharePrice</th>\n",
       "      <th>Value</th>\n",
       "      <th>Remaining</th>\n",
       "      <th>Form</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Buy</td>\n",
       "      <td>2016-08-04</td>\n",
       "      <td>2016-08-05 20:31:38</td>\n",
       "      <td>RESMED INC</td>\n",
       "      <td>RMD</td>\n",
       "      <td>FARRELL PETER C</td>\n",
       "      <td>director officer</td>\n",
       "      <td>20,000</td>\n",
       "      <td>$25.5400</td>\n",
       "      <td>$510,800.0000</td>\n",
       "      <td>367,978</td>\n",
       "      <td>Form 4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Buy</td>\n",
       "      <td>2016-08-04</td>\n",
       "      <td>2016-08-05 20:29:23</td>\n",
       "      <td>ENTEGRIS INC</td>\n",
       "      <td>ENTG</td>\n",
       "      <td>GMT CAPITAL CORP</td>\n",
       "      <td>10% owner</td>\n",
       "      <td>1,191,220</td>\n",
       "      <td>$16.8000</td>\n",
       "      <td>$20,012,500.0000</td>\n",
       "      <td>14,525,400</td>\n",
       "      <td>Form 4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Buy</td>\n",
       "      <td>2016-08-03</td>\n",
       "      <td>2016-08-05 20:07:56</td>\n",
       "      <td>DXP ENTERPRISES INC</td>\n",
       "      <td>dxpe</td>\n",
       "      <td>GMT CAPITAL CORP</td>\n",
       "      <td>10% owner</td>\n",
       "      <td>172,746</td>\n",
       "      <td>$15.9600</td>\n",
       "      <td>$2,757,030.0000</td>\n",
       "      <td>1,595,540</td>\n",
       "      <td>Form 4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Buy</td>\n",
       "      <td>2016-08-05</td>\n",
       "      <td>2016-08-05 20:04:56</td>\n",
       "      <td>SALESFORCE COM INC</td>\n",
       "      <td>CRM</td>\n",
       "      <td>Benioff Marc</td>\n",
       "      <td>director officer 10% owner</td>\n",
       "      <td>12,500</td>\n",
       "      <td>$27.0625</td>\n",
       "      <td>$338,281.0000</td>\n",
       "      <td>35,383,000</td>\n",
       "      <td>Form 4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Buy</td>\n",
       "      <td>2016-08-05</td>\n",
       "      <td>2016-08-05 19:46:39</td>\n",
       "      <td>FAIR ISAAC CORP</td>\n",
       "      <td>FIC</td>\n",
       "      <td>Wehmann James M</td>\n",
       "      <td>officer</td>\n",
       "      <td>16,215</td>\n",
       "      <td>$43.9000</td>\n",
       "      <td>$711,838.0000</td>\n",
       "      <td>64,611</td>\n",
       "      <td>Form 4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Side        Date       AcceptanceDate              Company Symbol  \\\n",
       "0  Buy  2016-08-04  2016-08-05 20:31:38           RESMED INC    RMD   \n",
       "1  Buy  2016-08-04  2016-08-05 20:29:23         ENTEGRIS INC   ENTG   \n",
       "2  Buy  2016-08-03  2016-08-05 20:07:56  DXP ENTERPRISES INC   dxpe   \n",
       "3  Buy  2016-08-05  2016-08-05 20:04:56   SALESFORCE COM INC    CRM   \n",
       "4  Buy  2016-08-05  2016-08-05 19:46:39      FAIR ISAAC CORP    FIC   \n",
       "\n",
       "              Owner                    OwnerRel     Shares SharePrice  \\\n",
       "0   FARRELL PETER C            director officer     20,000   $25.5400   \n",
       "1  GMT CAPITAL CORP                   10% owner  1,191,220   $16.8000   \n",
       "2  GMT CAPITAL CORP                   10% owner    172,746   $15.9600   \n",
       "3      Benioff Marc  director officer 10% owner     12,500   $27.0625   \n",
       "4   Wehmann James M                     officer     16,215   $43.9000   \n",
       "\n",
       "              Value   Remaining    Form  \n",
       "0     $510,800.0000     367,978  Form 4  \n",
       "1  $20,012,500.0000  14,525,400  Form 4  \n",
       "2   $2,757,030.0000   1,595,540  Form 4  \n",
       "3     $338,281.0000  35,383,000  Form 4  \n",
       "4     $711,838.0000      64,611  Form 4  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Renaming Columns\n",
    "df.columns= [\"Side\", \"Date\", \"AcceptanceDate\", \"Company\", \"Symbol\", \"Owner\", \"OwnerRel\", \"Shares\", \"SharePrice\", \"Value\", \"Remaining\", \"Form\"]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df.to_csv(\"/Users/sharanduggal/Documents/Datascience/Projects/WebScrapingProjects/Insider/Past_Year_Transactions\", sep = \"\\t\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://finviz.com/quote.ashx?t=bac&ty=c&ta=1&p=d\n"
     ]
    }
   ],
   "source": [
    "###Getting tickers' sector and industry details from Finviz \n",
    "# symbol_pages = \"http://finviz.com/quote.ashx?t=bac&ty=c&ta=1&p=d\"\n",
    "# print symbol_pages\n",
    "sector = []\n",
    "\n",
    "def get_industry(symbol_pages):\n",
    "    count = 0\n",
    "    stock_url = requests.get(symbol_pages)\n",
    "    stock_text = stock_url.text\n",
    "    stock_soup = BeautifulSoup(stock_text)\n",
    "    stock_table = stock_soup.find(\"table\", attrs={\"class\": \"fullview-title\"}) \n",
    "    ###Creating a list of sector & industry\n",
    "    ###Inserting a blank record in the event a ticker symbol is wrong or if a ticker page is not found on Finviz\n",
    "    if stock_url.ok: \n",
    "        sector.append([i.text for i in stock_table.find_all(\"a\")[0:4]]) \n",
    "        count = count+1\n",
    "        if count%2 == 0:\n",
    "            print count\n",
    "    else:\n",
    "        sector.append([\"\", \"\", \"\", \"\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "End\n"
     ]
    }
   ],
   "source": [
    "##Creating Finviz URLs for each symbol in the data set\n",
    "Urls = \"http://finviz.com/quote.ashx?t=\"+df.Symbol+\"&ty=c&ta=1&p=d\"\n",
    "print \"End\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "###Applying function to all Urls\n",
    "map(get_industry, Urls) \n",
    "print \"End\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[u'RMD', u'ResMed Inc.', u'Healthcare', u'Medical Appliances & Equipment'], [u'ENTG', u'Entegris, Inc.', u'Technology', u'Semiconductor Equipment & Materials'], [u'DXPE', u'DXP Enterprises, Inc.', u'Services', u'Industrial Equipment Wholesale'], [u'CRM', u'salesforce.com, inc.', u'Technology', u'Application Software'], ['', '', '', '']]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Side</th>\n",
       "      <th>Date</th>\n",
       "      <th>AcceptanceDate</th>\n",
       "      <th>Company</th>\n",
       "      <th>Symbol</th>\n",
       "      <th>Owner</th>\n",
       "      <th>OwnerRel</th>\n",
       "      <th>Shares</th>\n",
       "      <th>SharePrice</th>\n",
       "      <th>Value</th>\n",
       "      <th>Remaining</th>\n",
       "      <th>Form</th>\n",
       "      <th>Symbol</th>\n",
       "      <th>Sector</th>\n",
       "      <th>Industry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Buy</td>\n",
       "      <td>2016-08-04</td>\n",
       "      <td>2016-08-05 20:31:38</td>\n",
       "      <td>RESMED INC</td>\n",
       "      <td>RMD</td>\n",
       "      <td>FARRELL PETER C</td>\n",
       "      <td>director officer</td>\n",
       "      <td>20,000</td>\n",
       "      <td>$25.5400</td>\n",
       "      <td>$510,800.0000</td>\n",
       "      <td>367,978</td>\n",
       "      <td>Form 4</td>\n",
       "      <td>RMD</td>\n",
       "      <td>Healthcare</td>\n",
       "      <td>Medical Appliances &amp; Equipment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Buy</td>\n",
       "      <td>2016-08-04</td>\n",
       "      <td>2016-08-05 20:29:23</td>\n",
       "      <td>ENTEGRIS INC</td>\n",
       "      <td>ENTG</td>\n",
       "      <td>GMT CAPITAL CORP</td>\n",
       "      <td>10% owner</td>\n",
       "      <td>1,191,220</td>\n",
       "      <td>$16.8000</td>\n",
       "      <td>$20,012,500.0000</td>\n",
       "      <td>14,525,400</td>\n",
       "      <td>Form 4</td>\n",
       "      <td>ENTG</td>\n",
       "      <td>Technology</td>\n",
       "      <td>Semiconductor Equipment &amp; Materials</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Buy</td>\n",
       "      <td>2016-08-03</td>\n",
       "      <td>2016-08-05 20:07:56</td>\n",
       "      <td>DXP ENTERPRISES INC</td>\n",
       "      <td>dxpe</td>\n",
       "      <td>GMT CAPITAL CORP</td>\n",
       "      <td>10% owner</td>\n",
       "      <td>172,746</td>\n",
       "      <td>$15.9600</td>\n",
       "      <td>$2,757,030.0000</td>\n",
       "      <td>1,595,540</td>\n",
       "      <td>Form 4</td>\n",
       "      <td>DXPE</td>\n",
       "      <td>Services</td>\n",
       "      <td>Industrial Equipment Wholesale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Buy</td>\n",
       "      <td>2016-08-05</td>\n",
       "      <td>2016-08-05 20:04:56</td>\n",
       "      <td>SALESFORCE COM INC</td>\n",
       "      <td>CRM</td>\n",
       "      <td>Benioff Marc</td>\n",
       "      <td>director officer 10% owner</td>\n",
       "      <td>12,500</td>\n",
       "      <td>$27.0625</td>\n",
       "      <td>$338,281.0000</td>\n",
       "      <td>35,383,000</td>\n",
       "      <td>Form 4</td>\n",
       "      <td>CRM</td>\n",
       "      <td>Technology</td>\n",
       "      <td>Application Software</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Buy</td>\n",
       "      <td>2016-08-05</td>\n",
       "      <td>2016-08-05 19:46:39</td>\n",
       "      <td>FAIR ISAAC CORP</td>\n",
       "      <td>FIC</td>\n",
       "      <td>Wehmann James M</td>\n",
       "      <td>officer</td>\n",
       "      <td>16,215</td>\n",
       "      <td>$43.9000</td>\n",
       "      <td>$711,838.0000</td>\n",
       "      <td>64,611</td>\n",
       "      <td>Form 4</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Side        Date       AcceptanceDate              Company Symbol  \\\n",
       "0  Buy  2016-08-04  2016-08-05 20:31:38           RESMED INC    RMD   \n",
       "1  Buy  2016-08-04  2016-08-05 20:29:23         ENTEGRIS INC   ENTG   \n",
       "2  Buy  2016-08-03  2016-08-05 20:07:56  DXP ENTERPRISES INC   dxpe   \n",
       "3  Buy  2016-08-05  2016-08-05 20:04:56   SALESFORCE COM INC    CRM   \n",
       "4  Buy  2016-08-05  2016-08-05 19:46:39      FAIR ISAAC CORP    FIC   \n",
       "\n",
       "              Owner                    OwnerRel     Shares SharePrice  \\\n",
       "0   FARRELL PETER C            director officer     20,000   $25.5400   \n",
       "1  GMT CAPITAL CORP                   10% owner  1,191,220   $16.8000   \n",
       "2  GMT CAPITAL CORP                   10% owner    172,746   $15.9600   \n",
       "3      Benioff Marc  director officer 10% owner     12,500   $27.0625   \n",
       "4   Wehmann James M                     officer     16,215   $43.9000   \n",
       "\n",
       "              Value   Remaining    Form Symbol      Sector  \\\n",
       "0     $510,800.0000     367,978  Form 4    RMD  Healthcare   \n",
       "1  $20,012,500.0000  14,525,400  Form 4   ENTG  Technology   \n",
       "2   $2,757,030.0000   1,595,540  Form 4   DXPE    Services   \n",
       "3     $338,281.0000  35,383,000  Form 4    CRM  Technology   \n",
       "4     $711,838.0000      64,611  Form 4                      \n",
       "\n",
       "                              Industry  \n",
       "0       Medical Appliances & Equipment  \n",
       "1  Semiconductor Equipment & Materials  \n",
       "2       Industrial Equipment Wholesale  \n",
       "3                 Application Software  \n",
       "4                                       "
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###Concat the new Finviz Info with the Original data frame\n",
    "ind_df = pd.DataFrame(sector)\n",
    "ind_df.columns = [\"Symbol\", \"Company\", \"Sector\", \"Industry\"]\n",
    "del ind_df[\"Company\"]\n",
    "\n",
    "newdf = pd.concat([df,ind_df], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "newdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "newdf.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df.to_csv(\"/Users/sharanduggal/Documents/Datascience/Projects/WebScrapingProjects/Insider/Past_Year_Transactions\", sep = \"\\t\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}

df = read.table("/Users/sharanduggal/Documents/Datascience/Projects/WebScrapingProjects/Insider/Insider_Text.txt", sep = "\t", header = TRUE)
# colnames(df) = df[1 ,]
# df = df [-1,]
names(df)
str(df)

View(df)
head(df)

############### Insider Analaysis ###############

library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(reshape2)
library(data.table)
str(dfi)
summary(dfi)
View(dfi)
ncol(dfi)
nrow(dfi)

dfi = df
dfi = dfi %>% mutate(Day0 = Close1 - Price)
dfi = dfi %>% mutate(Day1 = Close2 - Close1)
dfi = dfi %>% mutate(Day2 = Close3 - Close1)
dfi = dfi %>% mutate(Day3 = Close4 - Close1)
dfi = dfi %>% mutate(Day4 = Close5 - Close1)
dfi = dfi %>% mutate(Day5 = Close6 - Close1)

dfi = dfi %>% mutate(Day0.P = ((Close1 - Price)/Price)*100)
dfi = dfi %>% mutate(Day1.P = ((Close2 - Close1)/Close1)*100)
dfi = dfi %>% mutate(Day2.P = ((Close3 - Close1)/Close1)*100)
dfi = dfi %>% mutate(Day3.P = ((Close4 - Close1)/Close1)*100)
dfi = dfi %>% mutate(Day4.P = ((Close5 - Close1)/Close1)*100)
dfi = dfi %>% mutate(Day5.P = ((Close6 - Close1)/Close1)*100)
dfi[ , 41:52] = round(dfi[ , 41:52],2)


dfi = dfi %>% mutate(Day1.V = ((Volume2 - Volume1)/Volume1)*100)
dfi = dfi %>% mutate(Day2.V = ((Volume3 - Volume1)/Volume1)*100)
dfi = dfi %>% mutate(Day3.V = ((Volume4 - Volume1)/Volume1)*100)
dfi = dfi %>% mutate(Day4.V = ((Volume5 - Volume1)/Volume1)*100)
dfi = dfi %>% mutate(Day5.V = ((Volume6 - Volume1)/Volume1)*100)
dfi[ , 53:57] = round(dfi[ , 53:57], 2)

summary(dfi$Day5.P)

dfi[ , 53][is.infinite(dfi [ , 53])]  = NA
dfi[ , 54][is.infinite(dfi [ , 54])]  = NA
dfi[ , 55][is.infinite(dfi [ , 55])]  = NA
dfi[ , 56][is.infinite(dfi [ , 56])]  = NA
dfi[ , 57][is.infinite(dfi [ , 57])]  = NA

dfi$month = substr(dfi$Date,6,7)

remove.cols = c("Symbol", "Date", "LastSale", "Parts", "Groups", "Shares", "SharePrice", "Value", "Remaining")
dfi = dfi[ , !names(dfi) %in% remove.cols]

str(dfi)
ncol(dfi)


####################################################################################################################################################################################
############################################################  END OF VARIABLE CREATION AND DATA CLEANING ################################ 
####################################################################################################################################################################################
str(dfi)
#OVERALL DENSITY CURVES

par(mfrow = c(2,2))

a = ggplot(dfi, aes(Day1.P, color=Side)) + geom_density() + xlab("Percentage Change Vs. Day 1") + 
  scale_color_brewer(palette = "Set3", direction = 1) + theme_dark() + ggtitle("Price change one day after transaction")

b = ggplot(dfi, aes(Day2.P, color=Side)) + geom_density() + xlab("Percentage Change Vs. Day 1") + 
  scale_color_brewer(palette = "Set3", direction = 1) + theme_dark() + ggtitle("Price change two days after transaction")

c = ggplot(dfi, aes(Day3.P, color=Side)) + geom_density() + xlab("Percentage Change Vs. Day 1") + 
  scale_color_brewer(palette = "Set3", direction = 1) + theme_dark() + ggtitle("Price change three days after transaction")

d = ggplot(dfi, aes(Day4.P, color=Side)) + geom_density() + xlab("Percentage Change Vs. Day 1") + 
  scale_color_brewer(palette = "Set3", direction = 1) + theme_dark() + ggtitle("Price change four days after transaction")

e = ggplot(dfi, aes(Day5.P, color=Side)) + geom_density() + xlab("Percentage Change Vs. Day 1") + 
  scale_color_brewer(palette = "Set3", direction = 1) + theme_dark() + ggtitle("Price change five days after transaction")

grid.arrange(a,b,c,d,e)

par(mfrow = c(1,1))

#ON AVERAGE, WHAT PERCENTAGE WOULD YOU EARN ON DAY1,2,3,4,5. ON BUY SIDE. ON SELL SIDE.
#ON AVERAGE, WHAT PERCENTAGE WOULD YOU EARN ON DAY1,2,3,4,5. ON BUY SIDE. ON SELL SIDE.
#ON AVERAGE, WHAT PERCENTAGE WOULD YOU EARN ON DAY1,2,3,4,5. ON BUY SIDE. ON SELL SIDE.
#ON AVERAGE, WHAT PERCENTAGE WOULD YOU EARN ON DAY1,2,3,4,5. ON BUY SIDE. ON SELL SIDE.
#### All stocks
overall.percent.data = dfi %>% group_by(Side) %>% summarise(Day1.Avg= mean(Day1.P, na.rm = TRUE), Day2.Avg= mean(Day2.P, na.rm = TRUE), 
                                     Day3.Avg= mean(Day3.P, na.rm = TRUE), Day4.Avg= mean(Day4.P, na.rm = TRUE), 
                                     Day5.Avg= mean(Day5.P, na.rm = TRUE))
  
price.change = melt(overall.percent.data, id.vars = "Side") %>% ggplot(aes(x = variable, y = value, fill = Side)) + 
  geom_bar(stat = "identity", position = "identity") + coord_flip() + ggtitle("% Price Change Post Trans. -- All Stocks") + 
  scale_fill_brewer(palette = "Set3") + theme_dark() + scale_x_discrete(labels = c("Day 1", "Day 2", "Day 3", "Day 4", "Day5")) +
  xlab("") + ylab("Percentage Change") + geom_text(data = subset(melt(overall.percent.data, id.vars = "Side"), (value>0 | value < 0.06)), aes(x = variable, y = value-0.1, label = paste0(round(value,2),"%")))  + 
  theme(plot.title = element_text(size = 24, face="bold"))  + ylim(-1.15, 3.5)

price.change

#### Stocks under 5
overall.percent.data = dfi %>% group_by(Side) %>% filter(Close1 < 5) %>%   
  summarise(Day1.Avg= mean(Day1.P, na.rm = TRUE), Day2.Avg= mean(Day2.P, na.rm = TRUE), 
                                                            Day3.Avg= mean(Day3.P, na.rm = TRUE), Day4.Avg= mean(Day4.P, na.rm = TRUE), 
                                                            Day5.Avg= mean(Day5.P, na.rm = TRUE))

price.less.5 = melt(overall.percent.data, id.vars = "Side") %>% ggplot(aes(x = variable, y = value, fill = Side)) + 
  geom_bar(stat = "identity", position = "identity") + coord_flip() + ggtitle("% Price Change Post Trans. -- Stocks < $5") + 
  scale_fill_brewer(palette = "Set3") + theme_dark() + scale_x_discrete(labels = c("Day 1", "Day 2", "Day 3", "Day 4", "Day5")) +
  xlab("") + ylab("Percentage Change") + geom_text(aes(x = variable, y = value+0.2, label = paste0(round(value,2),"%"))) + 
  theme(plot.title = element_text(size = 24, face="bold")) + ylim(-1.15, 3.5)

price.less.5

#### Stocks over 5
overall.percent.data = dfi %>% group_by(Side) %>% filter(Close1 > 5) %>%   
  summarise(Day1.Avg= mean(Day1.P, na.rm = TRUE), Day2.Avg= mean(Day2.P, na.rm = TRUE), 
            Day3.Avg= mean(Day3.P, na.rm = TRUE), Day4.Avg= mean(Day4.P, na.rm = TRUE), 
            Day5.Avg= mean(Day5.P, na.rm = TRUE))

price.more.5 = melt(overall.percent.data, id.vars = "Side") %>% ggplot(aes(x = variable, y = value, fill = Side)) + 
  geom_bar(stat = "identity", position = "identity") + coord_flip() + ggtitle("% Price Change Post Trans. -- Stocks > $5") + 
  scale_fill_brewer(palette = "Set3") + theme_dark() + scale_x_discrete(labels = c("Day 1", "Day 2", "Day 3", "Day 4", "Day5")) +
  xlab("") + ylab("Percentage Change") + geom_text(data = subset(melt(overall.percent.data, id.vars = "Side"), value>0.02), aes(x = variable, y = value+0.2, label = paste0(round(value,2),"%"), check_overlap = TRUE)) + 
  theme(plot.title = element_text(size = 24, face="bold")) + ylim(-1.15, 3.5)

grid.arrange(price.change, price.less.5, price.more.5, ncol = 3)


#ON AVERAGE, HOW DOES VOLUME CHANGE OVER THE 5 DAYS. 
#ON AVERAGE, HOW DOES VOLUME CHANGE OVER THE 5 DAYS. 
#ON AVERAGE, HOW DOES VOLUME CHANGE OVER THE 5 DAYS. 
#ON AVERAGE, HOW DOES VOLUME CHANGE OVER THE 5 DAYS. 

overall.volume = dfi %>% group_by(Side) %>% 
  summarise(Day1.Avg= mean(Day1.V, na.rm = TRUE), Day2.Avg= mean(Day2.V, na.rm = TRUE), 
            Day3.Avg= mean(Day3.V, na.rm = TRUE), Day4.Avg= mean(Day4.V, na.rm = TRUE), 
            Day5.Avg= mean(Day5.V, na.rm = TRUE))

volume.melted = melt(overall.volume, id.vars = "Side") %>% ggplot(aes(x = variable, y = value, fill = Side)) + 
  geom_bar(stat = "identity", position = "dodge") + ggtitle("% Change in Volume Post Transaction -- All Stocks") + 
  scale_fill_brewer(palette = "Set2") + theme_dark() + scale_x_discrete(labels = c("Day 1 Vs. Transaction Day", "Day 2 Vs. Transaction Day", "Day 3 Vs. Transaction Day", "Day 4 Vs. Transaction Day", "Day5 Vs. Transaction Day")) +
  xlab("") + ylab("Percentage Change") +ylim (0,70) + theme(plot.title = element_text(size = 24, face="bold"))# + ylim(-1.15, 3.5)

volume.melted


overall.volume = dfi %>% group_by(Side) %>% filter(Close1 < 5) %>%  
  summarise(Day1.Avg= mean(Day1.V, na.rm = TRUE), Day2.Avg= mean(Day2.V, na.rm = TRUE), 
            Day3.Avg= mean(Day3.V, na.rm = TRUE), Day4.Avg= mean(Day4.V, na.rm = TRUE), 
            Day5.Avg= mean(Day5.V, na.rm = TRUE))

volume.under.5 = melt(overall.volume, id.vars = "Side") %>% ggplot(aes(x = variable, y = value, fill = Side)) + 
  geom_bar(stat = "identity", position = "dodge") + ggtitle("% Change in Volume Post Transaction -- Stocks < $5") +
  scale_fill_brewer(palette = "Set2") + theme_dark() + scale_x_discrete(labels = c("Day 1 Vs. Transaction Day", "Day 2 Vs. Transaction Day", "Day 3 Vs. Transaction Day", "Day 4 Vs. Transaction Day", "Day5 Vs. Transaction Day")) +
  xlab("") + ylab("Percentage Change") + theme(plot.title = element_text(size = 24, face="bold"))

volume.under.5

overall.volume = dfi %>% group_by(Side) %>% filter(Close1 > 5) %>%  
  summarise(Day1.Avg= mean(Day1.V, na.rm = TRUE), Day2.Avg= mean(Day2.V, na.rm = TRUE), 
            Day3.Avg= mean(Day3.V, na.rm = TRUE), Day4.Avg= mean(Day4.V, na.rm = TRUE), 
            Day5.Avg= mean(Day5.V, na.rm = TRUE))

volume.over.5 = melt(overall.volume, id.vars = "Side") %>% ggplot(aes(x = variable, y = value, fill = Side)) + 
  geom_bar(stat = "identity", position = "dodge") + ggtitle("% Change in Volume Post Transaction -- Stocks > $5") +
  scale_fill_brewer(palette = "Set2") + theme_dark() + scale_x_discrete(labels = c("Day 1 Vs. Transaction Day", "Day 2 Vs. Transaction Day", "Day 3 Vs. Transaction Day", "Day 4 Vs. Transaction Day", "Day5 Vs. Transaction Day")) +
  xlab("") + ylab("Percentage Change") +ylim (0,70) + theme(plot.title = element_text(size = 24, face="bold"))# + ylim(-1.15, 3.5)

volume.over.5

grid.arrange(volume.melted, volume.under.5, volume.over.5, nrow = 3)


#### OVERALL RELATONSHIP BETWEEN VALUE OF SHARES AND ABSOLUTE PRICE CHANGE.

dfi %>% filter(Valu < 10000000) %>% ggplot(aes(x = Valu, y = Day5, color = Side)) + geom_point() + facet_grid(Side ~ .) + 
  scale_color_brewer() + theme_dark() + ggtitle("Price Change 5 days after transaction Vs. Value of Transaction") +
  xlab("Value of Transaction (# of Shares X Price Purchased/Sold)") + ylab("Absoltue Price Change: Day 5 Minus Transaction Day") +
  theme(plot.title = element_text(size = 24, face="bold"))

dfi %>% filter(Valu < 10000000) %>% ggplot(aes(x = Valu, y = Day5.P, color = Side)) + geom_point() + facet_grid(Side ~ .) +
  scale_color_brewer() + theme_dark() + ggtitle("Percentage Price Change 5 days after transaction Vs. Value of Transaction") +
  xlab("Value of Transaction (# of Shares X Price Purchased/Sold)") + ylab("Percentage Price Change: Day 5 Minus Transaction Day") +
  theme(plot.title = element_text(size = 24, face="bold"))


### Price VS. ABSOLUTE PRICE CHANGE
dfi %>% filter(Price < 1000) %>% ggplot(aes(x = Price, y = Day5, color = Side)) + geom_point() + facet_grid(Side ~ .) + 
  scale_color_brewer() + theme_dark() + ggtitle("Price Change 5 days after transaction Vs. Value of Transaction") +
  xlab("Value of Transaction (# of Shares X Price Purchased/Sold)") + ylab("Absoltue Price Change: Day 5 Minus Transaction Day") +
  theme(plot.title = element_text(size = 24, face="bold"))


#########################################################################################################################################
################################################SEASONALITY IN NUMBER OF INSIDER TRANSACTIONS###########################################
#########################################################################################################################################
names(dfi)
dfi$Date2 = as.Date(dfi$Date1)
str(dfi)
time.transactions = dfi %>% group_by(Side, month) %>% filter(Date2 > "2015-07-31" & Date2 < "2016-08-01") %>% summarise(trans = n())
View(time.transactions)

ggplot(time.transactions, aes(x = month, y = trans)) + geom_line(aes(group = Side, color = Side)) + 
  scale_x_discrete(limits = c("08", "09", "10", "11", "12", "01", "02", "03", "04", "05", "06", "07"), labels = 
                     c("Aug", "Sept", "Oct", "Nov", "Dec", "Jan", "Feb", "March", "April", "May", "Jun", "Jul")) + theme_dark() +
  scale_color_brewer() + ggtitle("Number of Transactions Per Month -- Past Year") + ylab("# of Transactions") + 
  xlab("Month") + theme(plot.title = element_text(size = 24, face="bold"))

###### Profit and Loss by month ######

dfi.red = subset(dfi, select = c(Side, month, Day5.P))
dfi.red = na.omit(dfi.red)
summary(dfi.red)

profit.by.month = dfi.red %>% group_by(Side, month) %>% summarise(Monthly.Performance = mean(Day5.P))

profit.by.month %>% ggplot(aes(x = month, y = Monthly.Performance, fill = Side)) + 
  geom_bar(stat = "identity", position= "dodge") + theme_dark() + ggtitle("Percentage Price Change 5 Days Post Transaction -- by Month") +
  theme(plot.title = element_text(size = 24, face="bold")) + ylab("Monthly Performance -- Percentage") + xlab("Month") + 
  scale_fill_brewer(palette = "Set3") + scale_x_discrete(limits = c("08", "09", "10", "11", "12", "01", "02", "03", "04", "05", "06", "07"), labels = 
                     c("Aug", "Sept", "Oct", "Nov", "Dec", "Jan", "Feb", "March", "April", "May", "Jun", "Jul"))
  
### GETTING MARKET PERFORMANCE INFO FOR THE PAST YEAR TO COMPARE AGAINST MONTHLY PERFORMANCE SHORT TERM PRICE MOVEMENT POST INSIDER TRANS. 
SPY = getSymbols("SPY",src="yahoo", from = "2015-08-01", auto.assign = FALSE)
candleChart(SPY)


#########################################################################################################################################
################################################PEFROMANCE BY SECTOR ###########################################
#########################################################################################################################################

##BUY SIDE
library(googleVis)
Sector = dfi %>% group_by(Sector) %>% filter(Side == "Buy") %>% summarise(Sector.Performance = mean(Day5.P, na.rm = TRUE)) 
View(Sector)

Gauge =  gvisGauge(Sector, 
                    options=list(min=-5, max=5, greenFrom=1,
                                 greenTo=5, yellowFrom=0, yellowTo=1,
                                 redFrom=-5, redTo=0, width=1000, height=800))

plot(Gauge)

##SELL SIDE
Sector = dfi %>% group_by(Sector) %>% filter(Side == "Sell") %>% summarise(Sector.Performance = mean(Day5.P, na.rm = TRUE)) 

Gauge =  gvisGauge(Sector, 
                   options=list(min=-5, max=5, greenFrom=-5,
                                greenTo=-1, yellowFrom=-1, yellowTo=0,
                                redFrom=0, redTo=5, width=1000, height=800))

plot(Gauge)


##CREATING SUBSET OF DATA SET AND FINAL DATA CLEANING STEPS.
str(regdata)
summary(regdata$MarketCapNew)
regdata = subset(dfi, select = c("Side", "OwnerRel", "Share", "Price", "Valu", "Left", "MarketCap", "IPOyear", "Sector", "Industry", "Exchange", "month", "Day1.V", "Close1", "Day5.P", "Day5"))
regdata$MarketCap = as.character(regdata$MarketCap)
regdata$MarketCapMult = substr(regdata$MarketCap, nchar(regdata$MarketCap), nchar(regdata$MarketCap))
regdata$MarketCap = gsub("\\$|B|M", "", regdata$MarketCap)
regdata$MarketCap = as.numeric(regdata$MarketCap)

regdata$MarketCapNew = ifelse(regdata$MarketCapMult == "B", regdata$MarketCap*1000000000,
                              ifelse(regdata$MarketCapMult == "M", regdata$MarketCap*1000000,regdata$MarketCap))

regdata$MarketCapNew = round(regdata$MarketCapNew, 2)
regdata = subset(regdata, select = -c(MarketCapMult))
names(regdata)



#####################   ADDING DATA  #####################  
#####################   QUANTMOD DATA  -- SPY #####################  

library(quantmod)
spy = getSymbols("^GSPC", src='yahoo', from="2006-01-01", to = "2016-10-01",  auto.assign = FALSE)
spy 
# nmonths(SPY)
# monthlyReturn(SPY)
tail(spy, 60)
spy = to.monthly(spy)
spy$mon.perform = ((spy$spy.Adjusted - spy$spy.Open)/spy$spy.Open)*100
summary(spy$mon.perform)
spy = as.data.frame(spy)
spy$date = rownames(spy)
rownames(spy) = NULL
spy$date = substr(spy$date, 1, 3)

spy$month = ifelse(spy$date == "Jan", "01", 
                   ifelse(spy$date == "Feb", "02",
                          ifelse(spy$date == "Mar", "03",
                                 ifelse(spy$date == "Apr", "04",
                                        ifelse(spy$date == "May", "05",
                                               ifelse(spy$date == "Jun", "06",
                                                      ifelse(spy$date == "Jul", "07",
                                                             ifelse(spy$date == "Aug", "08",
                                                                    ifelse(spy$date == "Sep", "09",
                                                                           ifelse(spy$date == "Oct", "10",
                                                                                  ifelse(spy$date == "Nov", "11",
                                                                                         ifelse(spy$date == "Dec", "12", NA))))))))))))


spy.stats = spy %>% group_by(month) %>% summarise(mkt.performance = mean(mon.perform), mkt.volume = mean(spy.Volume), mkt.range = mean(spy.High - spy.Low))
spy.stats

final.data = left_join(regdata, spy.stats)

View(final.data)
str(final.data)
str(spy.stats) 
str(regdata)
summary(spy$spy.Volume)



############################################################################################################################################
############################################################################################################################################
#################################################### MACHINE LEARNING  ##############################################
############################################################################################################################################
############################################################################################################################################

#### LINEAR REGRESSION BETWEEN STOCK PRICE ON DAY 5, 4, 3, 2, 1 (without volume) AND --- 
#FOR EACH SIDE
#MARKET CAP, INDUSTRY, SECTOR, EXCHANGE, MONTH, VOLUME CHANGE ON DAY1, VALUE OF TRADE

###################################################################################################################
###################################################################################################################
#############################################  KNN #############################################
###################################################################################################################
###################################################################################################################

knndata = final.data

#Converting Side, Exchange, Sector and Month to 0 - 1 Vars
for (level in levels(knndata$Exchange)) {
  knndata[paste("Exchange", level, sep = ".")] = ifelse(knndata$Exchange == level, 1, 0)
}

for (level in levels(knndata$Side)) {
  knndata[paste("Side", level, sep = ".")] = ifelse(knndata$Side == level, 1, 0)
}

for (level in levels(knndata$Sector)) {
  knndata[paste("Sector", level, sep = ".")] = ifelse(knndata$Sector == level, 1, 0)
}


knndata = subset(knndata, select =  -c(Side, Exchange, IPOyear, Day5, OwnerRel, MarketCap, Close1, Industry, Sector))
knndata$outcome = ifelse(knndata$Day5.P < 0, "Drop", 
                         ifelse(knndata$Day5.P > 0, "Rise", NA))
knndata$outcome = as.factor(knndata$outcome)
summary(knndata)
str(knndata)
View(knndata)

#Removing records with NA in variables.
knndata = na.omit(knndata)

#Standardizing Continuous variables
normalize = function(x) {
  y = (x - min(x))/(max(x) - min(x))
  y
}

knndata$Share = normalize(knndata$Share)
knndata$Valu =  normalize(knndata$Valu)
knndata$Price =  normalize(knndata$Price)
knndata$Left = normalize(knndata$Left)
knndata$MarketCapNew = normalize(knndata$MarketCapNew)
knndata$Day1.V = normalize(knndata$Day1.V)


kd.complete = knndata
knndata[ knndata$month == "08", "outcome"] = NA  #Introducing NAs for all August records
summary(knndata)
knndata = subset(knndata, select =  -c(month))

####### KNN ANALYSIS -- K = 166 
sqrt(nrow(knndata)) #comes out to 166
library(VIM)
library(kknn)
kd.166NN = kNN(knndata, k = 166)
kd.166.results = table(kd.complete[kd.complete$month == "08", "outcome"], kd.166NN[kd.166NN$outcome_imp == TRUE, "outcome"])
kd.166.results

#79% of sell signals correct when going by transaction side alone as opposed to 63% with knn model
table(kd.complete[kd.complete$month == "08" & kd.complete$Side.Sell == 1, "outcome"], kd.complete[kd.complete$month == "08" & kd.complete$Side.Sell == 1, "Side.Sell"])

#70% of Buy signals correct when going by transaction side alone as opposed to 49% with knn model
table(kd.complete[kd.complete$month == "08" & kd.complete$Side.Buy == 1, "outcome"], kd.complete[kd.complete$month == "08" & kd.complete$Side.Buy == 1, "Side.Buy"])

### TESTING OUT KNN RESULTS FOR STOCKS PRICED LESS THAN $5 WORKS OUT BETTER

############################################################################################
#######################  KNN FOR STOCKS UNDER 5 DOLLARS #######################
############################################################################################

knndata = final.data

#Converting Side, Exchange, Sector and Month to 0 - 1 Vars
for (level in levels(knndata$Exchange)) {
  knndata[paste("Exchange", level, sep = ".")] = ifelse(knndata$Exchange == level, 1, 0)
}

for (level in levels(knndata$Side)) {
  knndata[paste("Side", level, sep = ".")] = ifelse(knndata$Side == level, 1, 0)
}

for (level in levels(knndata$Sector)) {
  knndata[paste("Sector", level, sep = ".")] = ifelse(knndata$Sector == level, 1, 0)
}


knndata = knndata[knndata$Close1 < 5, ]


knndata = subset(knndata, select =  -c(Side, Exchange, IPOyear, Day5, OwnerRel, MarketCap, Close1, Industry, Sector))
knndata$outcome = ifelse(knndata$Day5.P < 0, "Drop", 
                         ifelse(knndata$Day5.P > 0, "Rise", NA))
knndata$outcome = as.factor(knndata$outcome)
str(knndata)

#Removing records with NA in variables.
knndata = na.omit(knndata)

#Standardizing Continuous variables
normalize = function(x) {
  y = (x - min(x))/(max(x) - min(x))
  y
}

knndata$Share = normalize(knndata$Share)
knndata$Valu =  normalize(knndata$Valu)
knndata$Price =  normalize(knndata$Price)
knndata$Left = normalize(knndata$Left)
knndata$MarketCapNew = normalize(knndata$MarketCapNew)
knndata$Day1.V = normalize(knndata$Day1.V)


kd.complete = knndata
knndata[ knndata$month == "08", "outcome"] = NA  #Introducing NAs for all August records
summary(knndata)
knndata = subset(knndata, select =  -c(month))

####### KNN ANALYSIS -- K = 53
sqrt(nrow(knndata)) #comes out to 53
kd.53NN = kNN(knndata, k = 53)
kd.53.results = table(kd.complete[kd.complete$month == "08", "outcome"], kd.53NN[kd.53NN$outcome_imp == TRUE, "outcome"])
kd.53.results


#61% of sell signals correct when going by transaction side alone as opposed to 71% with knn model
table(kd.complete[kd.complete$month == "08" & kd.complete$Side.Sell == 1, "outcome"], kd.complete[kd.complete$month == "08" & kd.complete$Side.Sell == 1, "Side.Sell"])

#51% of Buy signals correct when going by transaction side alone as opposed to 65% with knn model
table(kd.complete[kd.complete$month == "08" & kd.complete$Side.Buy == 1, "outcome"], kd.complete[kd.complete$month == "08" & kd.complete$Side.Buy == 1, "Side.Buy"])


###################################################################################################################
###################################################################################################################
############################################## ARCHIVE #####################################################################
##########################################################################################################################################
##########################################################################################################################################

############################################################################################
#######################  KNN FOR DATA FILTERED FOR THE ENERGY SECTOR #######################
############################################################################################

# knndata = kd.complete #reverting knndata to previous state
# knndata[ knndata$month == "08", "outcome"] = NA #Re-introducing NAs for all August records
# 
# ## Optional filters to run KNN on specific subsets of the data
# knndata = knndata[knndata$Sector.Energy == 1, ]
# kd.filtered = kd.complete[kd.complete$Sector.Energy == 1, ]
# knndata = subset(knndata, select =  -c(month))
# str(knndata)
# 
# sqrt(nrow(knndata)) #comes out to 33
# kd.33NN = kNN(knndata, k = 33)
# kd.33.results = table(kd.filtered[kd.filtered$month == "08", "outcome"], kd.33NN[kd.33NN$outcome_imp == TRUE, "outcome"])
# kd.33.results
















library(dplyr)
library(quantmod)

Insiders = read.csv("/Users/sharanduggal/Documents/Datascience/Projects/WebScrapingProjects/Insider/Past_Year_Transactions", sep = "\t")

insider = Insiders

insider$Share = gsub(",", "", insider$Shares)
insider$Price = gsub(",", "", insider$SharePrice)
insider$Valu = gsub(",", "", insider$Value)
insider$Left = gsub(",", "", insider$Remaining)
insider$Valu = substring(insider$Valu, 2, nchar(insider$Valu))
insider$Price = substring(insider$Price, 2, nchar(insider$Price))
insider$Date = as.character(insider$Date)
insider[ ,3:8] = sapply(insider[ ,3:8], as.character)
insider$Symbol = toupper(insider$Symbol)
insider$Symbol = gsub("\\(|\\)", "", insider$Symbol)
insider$Symbol = gsub("\\[|\\]", "", insider$Symbol)
insider$Symbol = gsub("\\'", "", insider$Symbol)
insider$Symbol = gsub("NYSE: ", "", insider$Symbol)
insider$Symbol = gsub("NYSE:", "", insider$Symbol)

View(insider)
insider$Share = as.numeric(insider$Share)
insider$Left = as.numeric(insider$Left)
insider$Price = as.numeric(insider$Price)
#insider$Valu = as.numeric(insider$Valu)


### Getting stock symbols and associated info
tickers = stockSymbols()
str(tickers)
View(tickers)
ins = left_join(insider, tickers, by = "Symbol")

### Removing Unmatched records and Symbols that do not retrieve info from Quantmod #HCACU, LCA, QPACU, SNFCA
ins = ins[!is.na(ins$Name), ]
ins = ins[!(ins$Symbol %in% c("HCACU", "LCA", "QPACU", "SNFCA")) , ]

symbols = ins$Symbol
dates = ins$Date

###Function to get Quantmod data and transpose it in an appendable format, i.e. single row for 6 days' worth of data. 
###Function to get Quantmod data and transpose it in an appendable format, i.e. single row for 6 days' worth of data. 
###Function to get Quantmod data and transpose it in an appendable format, i.e. single row for 6 days' worth of data. 
fiver = function(x,y) {
  temp = getSymbols(x, src='yahoo', from=y, auto.assign = FALSE)
  temp = as.data.frame(temp)
  #temp$Date = rownames(temp)
  rownames(temp) = NULL
  temp = temp[1:6, ]
  x1 = temp[ 1, 5:6]
  colnames(x1) = c("Volume1", "Close1")
  x2 = temp[ 2, 5:6]
  colnames(x2) = c("Volume2", "Close2")
  x3 = temp[ 3, 5:6]
  colnames(x3) = c("Volume3", "Close3")
  x4 = temp[ 4, 5:6]
  colnames(x4) = c("Volume4", "Close4")
  x5 = temp[ 5, 5:6]
  colnames(x5) = c("Volume5", "Close5")
  x6 = temp[ 6, 5:6]
  colnames(x6) = c("Volume6", "Close6")
  Symbol = x
  Date = y
  stock.row = cbind(Symbol,Date,x1,x2,x3,x4,x5, x6)
}

### Breaking up data into 5 parts to make it easier to download quantmod data and transpose it -- 28,000 rows in total
ins = ins %>% mutate(Groups = ifelse(X <= 8000, 1, 
                                     ifelse(X > 8000 & X <= 16000, 2, 
                                            ifelse(X>16000 & X <= 24000, 3, 
                                                   ifelse(X>24000 & X<=32000, 4,
                                                          ifelse(X>32000 & X <41000, 5, 5))))))  
  
symbols = ins %>% filter(Groups == 5) %>% select(Symbol)
dates = ins %>% filter(Groups == 5) %>% select(Date)
symbols = unlist(symbols)
dates = unlist(dates)
typeof(dates)

stockprice5 = data.frame(Symbol = NA, Date = NA, Volume1 = NA, Close1 = NA, Volume2 = NA, Close2 = NA, 
                   Volume3 = NA, Close3 = NA, Volume4 = NA, Close4 = NA, Volume5 = NA, Close5 = NA,  
                   Volume6 = NA, Close6 = NA)

symbol= unique(symbols)


for (i in 1:length(symbols)){
  new.row = fiver(symbols[i], dates[i])
  stockprice5 = rbind(stockprice5, new.row)
}

### Cleaning and merging the 5 parts of the read-in stock prices
rownames(stockprice) = NULL
rownames(stockprice2) = NULL
rownames(stockprice3) = NULL
rownames(stockprice4) = NULL
rownames(stockprice5) = NULL
stockprice = stockprice[!is.na(stockprice$Symbol), ]
stockprice2 = stockprice2[!is.na(stockprice2$Symbol), ]
stockprice3 = stockprice3[!is.na(stockprice3$Symbol), ]
stockprice4 = stockprice4[!is.na(stockprice4$Symbol), ]
stockprice5 = stockprice5[!is.na(stockprice5$Symbol), ]
prices = rbind(stockprice, stockprice2, stockprice3, stockprice4, stockprice5)
write.csv(prices, file = "/Users/sharanduggal/Documents/Datascience/Projects/WebScrapingProjects/Insider/prices.csv")

library(data.table)
setnames(ins, old = c("Symbol","Date"), new = c("Symbol1", "Date1"))
dfi = cbind(ins,prices)
# write.csv(dfi, file = "/Users/sharanduggal/Documents/Datascience/Projects/WebScrapingProjects/Insider/Insider_Final.csv")
# write.csv(dfi, file = "/Users/sharanduggal/Documents/Datascience/Projects/WebScrapingProjects/Insider_Backup.csv")

write.table(dfi, file = "/Users/sharanduggal/Documents/Datascience/Projects/WebScrapingProjects/Insider/Insider_Text.txt", sep='\t', 
            row.names=FALSE)



